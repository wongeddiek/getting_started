import Data.List (group) -- for Problem 12

-- Problem 12: Highly divisible triangular number
-- The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
-- What is the value of the first triangle number to have over five hundred divisors?

-- function for finding an infinite list of triangle numbers
triangleNum :: [Int]
triangleNum = 1: genTri [2..] triangleNum
  where genTri (x:xs) (y:ys) = x+y : genTri xs ys

-- function for finding # of divisors of a given number.  NOT EFFICIENT
divisors n = foldl (\acc x -> if n `mod` x == 0 then x : acc else acc) [] [1..n]
-- let's find a better way to find number of divisors of a number

-- Let d(n) be the number of divisors for the natural number, n.
-- We begin by writing the number as a product of prime factors: n = p^a * q^b * r^c...
-- then the number of divisors, d(n) = (a+1)(b+1)(c+1)...

-- first build a function given a number n, returns a list of all its prime factors
primeFactorList:: [Int] -> Int -> [Int]
primeFactorList (x:xs) n
  | n <= 1         = []
  | n `mod` x == 0 = x : primeFactorList (x:xs) (n `div` x)
  | otherwise      = primeFactorList xs n

-- wrapper function for primeFactorList
primeFactors :: Int -> [Int]
primeFactors n = primeFactorList [2..] n

-- function for finding the number of divisors using the prime factor list
-- 'group' create sublists of same-valued elements given a list
-- using list comprehension, for each sublist, get its length + 1
-- then get the product of the resulting list = num of divisors
numDivisors n = product [length x + 1 | x <- (group $ primeFactors n)]

-- getting the first triangle number that has > 500 divisors
highDivTriNum :: Int
highDivTriNum = head $ dropWhile (\n -> (numDivisors n) < 500) triangleNum
